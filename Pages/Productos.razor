@page "/productos"
@using PedidosFront.Models.Producto
@using PedidosFront.Shared.Components
@inject PedidosFront.Services.ProductoService ProductoService


<h3 class="mb-3">Gestión de Productos</h3>

<!-- Formulario Crear / Editar -->
<div class="card p-3 mb-4 shadow-sm" style="max-width: 500px;">
    <EditForm Model="productoForm" OnValidSubmit="GuardarProducto">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Codigo</label>
            <InputText class="form-control" @bind-Value="productoForm.Codigo" />
        </div>
        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="productoForm.Nombre" />
        </div>
        <div class="mb-3">
            <label class="form-label">Precio de Venta </label>
            <InputNumber class="form-control" @bind-Value="productoForm.PrecioVenta" />
        </div>
        <div class="mb-3">
            <label class="form-label">Existencias</label>
            <InputNumber class="form-control" @bind-Value="productoForm.Existencias" />
        </div>
        <div class="mb-3">
            <label class="form-label">Tiene Iva?</label>
            <InputCheckbox class="form-control" @bind-Value="productoForm.TieneIva" />
        </div>
        @* <button class="btn btn-primary me-2">@((productoForm.ProductoId == 0) ? "Crear" : "Actualizar")</button> *@
        <button class="btn btn-primary" disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <span class="spinner-border spinner-border-sm"></span>
                <span>Guardando...</span>
            }
            else
            {
                @((productoForm.ProductoId == 0) ? "Crear" : "Actualizar")
            }

        </button>
        @if(productoForm.ProductoId != 0)
        {
            <button type="button" class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
        }
    </EditForm>
</div>

@if(productos is null)
{
    <p><em>Cargando productos...</em></p>
}
else if(!productos.Any())
{
    <div class="alert alert-warning">No hay Productos.</div>
}
else
{
    @* <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Precio</th>
                <th>Existencias</th>
                <th>Tiene IVA?</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var p in productos)
            {
                <tr>
                    <td>@p.ProductoId</td>
                    <td>@p.Nombre</td>
                    <td>@p.PrecioVenta</td>
                    <td>@p.Existencias</td>
                    <td>@(p.TieneIva.HasValue && p.TieneIva.Value ? "Si":"No")</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarProducto(p)">Editar</button>
                        <button class="btn btn-sm btn-danger me-2" @onclick="() => Eliminar(p.ProductoId)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table> *@

<DataTable TItem="ProductoDto" Items="productos" Headers="productoHeaders">
  <RowTemplate>
            <td>@context.ProductoId</td>
            <td>@context.Codigo</td>
            <td>@context.Nombre</td>
            <td>@context.PrecioVenta.ToString("C")</td>
            <td>@context.Existencias</td>
            <td>@(context.TieneIVA == true ? "Si":"No")</td>
  </RowTemplate>
  <ActionTemplate>
    <button class='btn btn-sm btn-warning me-1' @onclick="() => EditarProducto(context)">Editar</button>
            <button class='btn btn-sm btn-danger' @onclick="() => Eliminar(context.ProductoId)">Eliminar</button>
  </ActionTemplate>
</DataTable>

<!-- Controles de Paginación -->
<div class="mt-3 d-flex justify-content-between">
    <button class="btn btn-outline-secondary" @onclick="PaginaPrevia" disabled="@(pageNumber == 1)"> Anterior</button>
    <span>Página @pageNumber de @totalPages</span>
    <button class="btn btn-outline-secondary" @onclick="PaginaSiguiente" disabled="@(pageNumber == totalPages)">Siguiente</button>
</div>
}

@code {
    private List<ProductoDto>? productos;
    private List<string> productoHeaders = new()
    {
        "ID", "Código", "Nombre", "Precio", "Existencias", "IVA"
    };
    private ActualizarProductoCommand productoForm = new();

    // Paginacion
    private int pageNumber = 1;
    private int pageSize = 2;
    private int totalPages = 1;
    private int totalCount = 0;

    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        var result = await ProductoService.ObtenerProductosAsync(pageNumber, pageSize);
        productos = result.Items;
        pageNumber = result.PageNumber;
        pageSize = result.PageSize;
        totalPages = result.TotalPages;
        totalCount = result.TotalCount;
    }

    private async Task PaginaSiguiente()
    {
        if (pageNumber < totalPages)
        {
            pageNumber++;
            await CargarProductos();
        }
    }

    private async Task PaginaPrevia()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await CargarProductos();
        }
    }

    private async Task GuardarProducto()
    {
        if (isSubmitting) return;
        isSubmitting = true;
        try
        {
            bool ok;
            if (productoForm.ProductoId == 0)
            {
                // Crear
                var command = new CrearProductoCommad
                {
                    Codigo = productoForm.Codigo,
                    Nombre = productoForm.Nombre,
                    PrecioVenta = productoForm.PrecioVenta,
                    Existencias = productoForm.Existencias,
                    TieneIVA = productoForm.TieneIva
                };
                ok = await ProductoService.CrearProductoAsync(command);
            }
            else
            {
                // Actualizar
                ok = await ProductoService.ActualProductoAsync(productoForm.ProductoId, productoForm);
            }

            if (ok)
            {
                await CargarProductos();
                productoForm = new ActualizarProductoCommand(); // limpiar formulario
                StateHasChanged();
            }
        }
        finally
        {
            isSubmitting = false;
        }

    }

    private void EditarProducto(ProductoDto dto)
    {
        productoForm = new ActualizarProductoCommand
            {
                ProductoId = dto.ProductoId,
                Codigo = dto.Codigo,
                Nombre = dto.Nombre,
                PrecioVenta = dto.PrecioVenta,
                Existencias = dto.Existencias,
                TieneIva = dto.TieneIVA ?? false
            };
    }

    private void CancelarEdicion()
    {
        productoForm = new ActualizarProductoCommand();
    }

    private async Task Eliminar(int id)
    {
        var ok = await ProductoService.EliminarProductoAsync(id);
        if (ok)
        {
            await CargarProductos();
            StateHasChanged();
        }
    }
}
